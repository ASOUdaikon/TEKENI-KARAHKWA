using System.Collections;
using System.Collections.Generic;
using UnityEngine;
//
using System.Linq;

public class TileSpriteController : MonoBehaviour
{
    public Sprite grassSprite;
    public Sprite waterSprite;

    Dictionary<Tile, GameObject> tileGameObjectMap;

    World world { get { return WorldController.Instance.world; } }

    void Start()
    {
        // Instantiate (initialize?) our dictionary that 
        // tracks which GameObject is rendering which Tile data.
        tileGameObjectMap = new Dictionary<Tile, GameObject>();

        // Loop through our tiles and create a GameObject for each one.
        for (int x = 0; x < world.Width; x++)
        {
            for (int y = 0; y < world.Height; y++)
            {
                Tile tile_data = world.GetTileAt(x, y);

                GameObject tile_go = new GameObject();

                // Add our tile/GO pair to the dictionary.
                tileGameObjectMap.Add(tile_data, tile_go);

                tile_go.name = "Tile_" + x + "_" + y;
                tile_go.transform.position = new Vector3(tile_data.X, tile_data.Y, 0);
                tile_go.transform.SetParent(this.transform, true);

                // Add a sprite renderer. 
                // Set a default sprite for empty tiles.
                SpriteRenderer sr = tile_go.AddComponent<SpriteRenderer>();
                sr.sprite = waterSprite;
                sr.sortingLayerName = "Tile";

                OnTileChanged(tile_data);
            }
        }

        // Register 'WorldController.OnTileChanged()' (change the tile's sprite) to our callback.
        world.RegisterTileChanged(OnTileChanged);
    }

    // THIS IS AN EXAMPLE -- NOT CURRENTLY USED
    void DestroyAllTileGameObjects()
    {
        // This function might get called when we are changing floors/levels.
        // We need to destroy all visual **GameObjects** -- but not the actual tile data!

        while (tileGameObjectMap.Count > 0)
        {
            Tile tile_data = tileGameObjectMap.Keys.First();
            GameObject tile_go = tileGameObjectMap[tile_data];

            // Remove the pair from the map.
            tileGameObjectMap.Remove(tile_data);

            // Unregister the callback.
            tile_data.UnregisterTileTypeChangedCallback(OnTileChanged);

            // Destroy the visual GameObject.
            Destroy(tile_go);
        }

        // Presumably, after this function gets called, we'd be calling another 
        // function to build all the GameObjects for the tiles on the new floor/level.

    }

    void OnTileChanged(Tile tile_data)
    {
        if (tileGameObjectMap.ContainsKey(tile_data) == false)
        {
            Debug.LogError("tileGameObjectMap doesn't contain the tile_data -- did you forget to add the tile to the dictionary? Or maybe forgot to unregister a callback?");
            return;
        }

        GameObject tile_go = tileGameObjectMap[tile_data];

        if (tile_go == null)
        {
            Debug.LogError("tileGameObjectMap's returned GameObject is null -- did you forget to add the tile to the dictionary? Or maybe forgot to unregister a callback?");
            return;
        }

        if (tile_data.Type == TileType.Grass)
        {
            // tile_go.GetComponent<SpriteRenderer>().sprite = floorSprite;
            // int i = Random.Range(0, 9);
            tile_go.GetComponent<SpriteRenderer>().sprite = grassSprite;
        }
        else if (tile_data.Type == TileType.Water)
        {
            tile_go.GetComponent<SpriteRenderer>().sprite = waterSprite;
        }
        else
        {
            Debug.LogError("WorldController - OnTileTypeChanged() - Unrecognized tile type.");
        }
    }


}
