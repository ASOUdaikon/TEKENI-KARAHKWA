//
using System;
//
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class World
{
    Tile[,] tiles;

    public int Width { get; protected set; }
    public int Height { get; protected set; }
    
    Action<Tile> cbTileChanged;

    public World(int width, int height)
    {
        // Creates an empty world.
        SetupWorld(width, height);
    }

    /// <summary>
    /// Default constructor, used when loading a world from a file.
    /// </summary>
    public World()
    {

    }

    void SetupWorld(int width, int height)
    {
        Width = width;
        Height = height;

        tiles = new Tile[Width, Height];

        for (int x = 0; x < Width; x++)
        {
            for (int y = 0; y < Height; y++)
            {
                tiles[x, y] = new Tile(this, x, y);
                // Tile.RegisterTileTypeChangedCallback :: World.OnTileChanged()
                tiles[x, y].RegisterTileTypeChangedCallback(OnTileChanged);
            }
        }

        Debug.Log("World created with " + (Width * Height) + " tiles.");

        //
        RandomizeTiles();
    }

    public void RandomizeTiles()
    {
        Debug.Log("World -- RandomizeTiles()");

        for (int x = 0; x < Width; x++)
        {
            for (int y = 0; y < Height; y++)
            {
                if (UnityEngine.Random.Range(0, 2) == 0)
                {
                    tiles[x, y].Type = TileType.Water;
                }
                else
                {
                    tiles[x, y].Type = TileType.Grass;
                }
            }
        }
    }

    public void SetupPathfindingExample()
    {
        Debug.Log("SetupPathfindingExample");

        // Make a set of floors/walls to test pathfinding.

        int l = Width / 2 - 5;
        int b = Height / 2 - 5;

        for (int x = l - 5; x < l + 15; x++)
        {
            for (int y = b - 5; y < b + 15; y++)
            {
                tiles[x, y].Type = TileType.Grass;

                if (x == l || x == (l + 9) || y == b || y == (b + 9))
                {
                    if (x != (l + 9) && y != (b + 4))
                    {
                        // PlaceFurniture("Wall", tiles[x, y]);
                    }
                }
            }
        }
    }

    public Tile GetTileAt(int x, int y)
    {
        if (x >= Width || x < 0 || y >= Height || y < 0)
        {
            Debug.LogError("TILE (" + x + " ," + y + ") is out of range.");
            return null;
        }

        return tiles[x, y];
    }

    public void RegisterTileChanged(Action<Tile> callbackFunc)
    {
        // WC.OTC
        cbTileChanged += callbackFunc;
    }

    public void UnregisterTileChanged(Action<Tile> callbackFunc)
    {
        cbTileChanged -= callbackFunc;
    }

    void OnTileChanged(Tile t)
    {
        if (cbTileChanged == null)
        {
            return;
        }

        // Call 'WorldController.OnTileChanged()'. (Updates tile's sprite.)
        // Call 'SoundController.OnTileChanged()'. (Plays sound when we create a 'floor' tile.)
        cbTileChanged(t);

        // InvalidateTileGraph();
    }

}
