// For 'Action'.
using System;
// 
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class NodeGraph : MonoBehaviour
{
    //
    Action<Node> cbNodeChanged;

    // Set in inspector; editor mode.
    public Sprite testSprite;

    List<Node> nodesList;
    public Node[,] nodesArray;

    // Nodes per tile per axes. 
    // ** Should this be a constant? ARGUMENT : public static property (GETter).
    const int nodesPerTileAxes = 2;

    [HideInInspector]
    public int nodeGraphSizeX;
    [HideInInspector]
    public int nodeGraphSizeY;
    
    void Start()
    {
        nodesList = new List<Node>();

        nodeGraphSizeX = WorldController.Instance.world.Width * nodesPerTileAxes;
        nodeGraphSizeY = WorldController.Instance.world.Height * nodesPerTileAxes;
        
        GenerateNodeGraph006();

        // Note : 400 nodes when we're 10x10 tiles. 40,000 nodes when 100x100 tiles.
        Debug.Log("There are currently " + nodesList.Count + " nodes in our " + WorldController.Instance.world.Width + " by " + WorldController.Instance.world.Height + " tiles world.");  
    }
    
    void GenerateNodeGraph006()
    {
        nodesArray = new Node[nodeGraphSizeX, nodeGraphSizeY];

        #region Create Nodes
        for (int x = 0; x < nodeGraphSizeX; x++)
        {
            for (int y = 0; y < nodeGraphSizeY; y++)
            {
                // Get the node's x/y positions.
                float nodeX = x / nodesPerTileAxes;
                float nodeY = y / nodesPerTileAxes;
                
                if (x % nodesPerTileAxes != 0) 
                {
                    nodeX += 0.5f;
                }
                if (y % nodesPerTileAxes != 0)
                {
                    nodeY += 0.5f;
                }

                // Get the tile that encompasses the node.
                Tile tileUnderNode = WorldController.Instance.world.GetTileAt(x / 2, y / 2);

                // Create new node.
                Node n = new Node(this, nodeX, nodeY, tileUnderNode);

                // Add node to nodes array.
                nodesArray[x, y] = n;

                // For testing; visuals.
                n.RegisterNodeChangedCallback(OnNodeChanged);

                nodesList.Add(n);

            }
        }
        #endregion

        #region Create Edges for each Node

        int edgeCount = 0;

        foreach(Node n in nodesList)
        {
            // DO I KEEP EDGES LEADING OUT OF 'UNWALKABLE' NODES (that lead to walkable nodes)?

            List<Edge> edges = new List<Edge>();

            Node[] neighborNodes = n.GetNeighborNodes(true);

            for (int i = 0; i < neighborNodes.Length; i++)
            {
                if(neighborNodes[i] != null && neighborNodes[i].tile.movementCost > 0)
                {
                    
                    if(IsClippingCorner(n, neighborNodes[i]))
                    {
                        continue;
                    }

                    Edge edge = new Edge();
                    edge.cost = neighborNodes[i].tile.movementCost;
                    edge.node = neighborNodes[i];
                    edges.Add(edge);

                    edgeCount++;
                }
            }

            n.edges = edges.ToArray();
        }

        Debug.Log("NodeGraph -- Created " + edgeCount + " edges.");

        #endregion
    }

    // TODO : Monitor this.
    bool IsClippingCorner(Node currNode, Node neighNode)
    {
        // If the movement from 'curr' to 'neigh' is diagonal (e.g. Northeast)
        // Then check to make sure we aren't clipping (e.g. North and East are both walkable).

        // Check if we are diagonal.
        if (Mathf.Abs(currNode.nodePosX - neighNode.nodePosX) + 
            Mathf.Abs(currNode.nodePosY - neighNode.nodePosY) == 2)
        {
            // We are diagonal.
            // dX and dY can be either +1 or -1.
            float dX = currNode.nodePosX - neighNode.nodePosX;
            float dY = currNode.nodePosY - neighNode.nodePosY;
            
            if(currNode.nodeGraph.
                GetNodeAt(
                          NodeHelper.GetNodeArrayElementFromFloat(currNode.nodePosX) - 
                          NodeHelper.GetNodeArrayElementFromFloat(dX), 
                          NodeHelper.GetNodeArrayElementFromFloat(currNode.nodePosY)
               ).tile.movementCost == 0)
            {
                // East or West is unwalkable, therefore this would be a clipped movement.
                return true;
            }
            
            if(currNode.nodeGraph.
                GetNodeAt(
                          NodeHelper.GetNodeArrayElementFromFloat(currNode.nodePosX),
                          NodeHelper.GetNodeArrayElementFromFloat(currNode.nodePosY) - 
                          NodeHelper.GetNodeArrayElementFromFloat(dY)
               ).tile.movementCost == 0)
            {
                // North or South is unwalkable, therefore this would be a clipped movement.
                return true;
            }

        }

        return false;
    }
    
    public Node GetNodeAt(int x, int y)
    {
        if (x >= nodeGraphSizeX || x < 0 || y >= nodeGraphSizeY || y < 0)
        {
            // Debug.LogError("NODE (" + x + " ," + y + ") is out of range.");
            return null;
        }
        
        return nodesArray[x, y];
    }
    
    void OnDrawGizmos()
    {
        // SAVE
        /*
        Node n = GetNodeAt(1, 1);
        // Debug.Log("Our test node is at : " + n.nodePosX + ", " + n.nodePosY);
        // Debug.Log(n.edges.Length);

        foreach(Edge edge in n.edges)
        {
            // Debug.Log("An edge points to : " + edge.node.nodePosX + ", " + edge.node.nodePosY);
            Debug.DrawLine(new Vector3(n.nodePosX, n.nodePosY, 0), new Vector3(edge.node.nodePosX, edge.node.nodePosY, 0), Color.yellow, Mathf.Infinity, false);
        }
        */

        /*
        Node n2 = GetNodeAt(4, 3);
        Debug.Log("Our test node is at : " + n.nodePosX + ", " + n.nodePosY);

        foreach (Edge edge in n.edges)
        {
            Debug.Log("An edge points to : " + edge.node.nodePosX + ", " + edge.node.nodePosY);
            Debug.DrawLine(new Vector3(n2.nodePosX, n2.nodePosY, 0), new Vector3(edge.node.nodePosX, edge.node.nodePosY, 0), Color.yellow, Mathf.Infinity, false);
        }
        */

        // /*
        foreach(Node n in nodesList)
        {
            foreach(Edge edge in n.edges)
            {
                // Adding a 0.25f to each x/y coordinate allows 
                // us to draw from the center of each node.
                Debug.DrawLine(new Vector3(n.nodePosX + 0.25f, n.nodePosY + 0.25f, 0), new Vector3(edge.node.nodePosX + 0.25f, edge.node.nodePosY + 0.25f, 0), Color.yellow, Mathf.Infinity, false);
            }
        }
        // */

    }

    public void RegisterNodeChanged(Action<Node> callbackFunc)
    {
        cbNodeChanged += callbackFunc;
    }

    public void UnregisterNodeChanged(Action<Node> callbackFunc)
    {
        cbNodeChanged -= callbackFunc;
    }

    void OnNodeChanged(Node node)
    {
        if(cbNodeChanged == null)
        {
            return;
        }

        cbNodeChanged(node);
    }

}
