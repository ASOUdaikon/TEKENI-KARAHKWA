using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

// A node is PLACED (not centered? due to calculations) at an x/y ?+ 0.5 combination... Lazy.
// A node "extends" toward 0.5, 0.5 away from its placement position.

// A node encompasses an area of one of the following cases: 

// 1) (x,       y)       to (x → (x + 0.5),   y → (y + 0.5))  == (0, 0)     → (0.5, 0.5) : Bottom left
// 2) (x + 0.5, y)       to (x → (x + 1)  ,   y → (y + 0.5))  == (0.5, 0)   → (1, 0.5)   : Bottom right
// 3) (x,       y + 0.5) to (x → (x + 0.5),   y → (y + 1))    == (0, 0.5)   → (0.5, 1)   : Top left
// 4) (x + 0.5, y + 0.5) to (x → (x + 1)  ,   y → (y + 1))    == (0.5, 0.5) → (1, 1)     : Top right

public class Node
{
    public float nodePosX { get; protected set; }
    public float nodePosY { get; protected set; }

    public NodeGraph nodeGraph;

    public Tile tile;

    #region Node sprite rendering
    Action<Node> cbNodeChanged;
    private bool visualState = true;
    public bool VisualState
    {
        get { return visualState; }
        set
        {
            bool oldVisualState = visualState;
            visualState = value;
            if(cbNodeChanged != null && oldVisualState != visualState)
            {
                cbNodeChanged(this);
            }
        }
    }

    public void RegisterNodeChangedCallback(Action<Node> callback)
    {
        cbNodeChanged += callback;
    }

    public void UnregisterNodeChangedCallback(Action<Node> callback)
    {
        cbNodeChanged -= callback;
    }
    #endregion

    // Do we need a world reference? No, we can get it from our tile.
    // public World world;

    public Edge[] edges;
    
    public Node(NodeGraph nodeGraph, float x, float y, Tile tile)
    {
        this.nodeGraph = nodeGraph;
        this.nodePosX = x;
        this.nodePosY = y;
        this.tile = tile;
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="diagOkay">Is diagonal movement okay?</param>
    /// <returns></returns>
    public Node[] GetNeighborNodes(bool diagOkay = false)
    {
        Node[] neighborsNodes;

        if (diagOkay == false)
        {
            neighborsNodes = new Node[4];    // N E S W
        }
        else
        {
            neighborsNodes = new Node[8];    // N E S W NE SE SW NW
        }

        Node potentialNeighbor;
        
        // North.
        potentialNeighbor = nodeGraph.GetNodeAt(
                                        NodeHelper.GetNodeArrayElementFromFloat(nodePosX),
                                        NodeHelper.GetNodeArrayElementFromFloat(nodePosY + 0.5f)
                                                );
        neighborsNodes[0] = potentialNeighbor;               // Could be null, but that's okay.
        // East.
        potentialNeighbor = nodeGraph.GetNodeAt(
                                        NodeHelper.GetNodeArrayElementFromFloat(nodePosX + 0.5f),
                                        NodeHelper.GetNodeArrayElementFromFloat(nodePosY)
                                                );
        neighborsNodes[1] = potentialNeighbor;               // Could be null, but that's okay.
        // South.
        potentialNeighbor = nodeGraph.GetNodeAt(
                                        NodeHelper.GetNodeArrayElementFromFloat(nodePosX), 
                                        NodeHelper.GetNodeArrayElementFromFloat(nodePosY - 0.5f)
                                                );
        neighborsNodes[2] = potentialNeighbor;               // Could be null, but that's okay.
        // West.
        potentialNeighbor = nodeGraph.GetNodeAt(
                                        NodeHelper.GetNodeArrayElementFromFloat(nodePosX - 0.5f),
                                        NodeHelper.GetNodeArrayElementFromFloat(nodePosY)
                                                );
        neighborsNodes[3] = potentialNeighbor;               // Could be null, but that's okay.

        if (diagOkay == true)
        {
            // Northeast.
            potentialNeighbor = nodeGraph.GetNodeAt(
                                        NodeHelper.GetNodeArrayElementFromFloat(nodePosX + 0.5f),
                                        NodeHelper.GetNodeArrayElementFromFloat(nodePosY + 0.5f)
                                                    );
            neighborsNodes[4] = potentialNeighbor;               // Could be null, but that's okay.
            // Southeast.
            potentialNeighbor = nodeGraph.GetNodeAt(
                                        NodeHelper.GetNodeArrayElementFromFloat(nodePosX + 0.5f),
                                        NodeHelper.GetNodeArrayElementFromFloat(nodePosY - 0.5f)
                                                    );
            neighborsNodes[5] = potentialNeighbor;               // Could be null, but that's okay.
            // Southwest.
            potentialNeighbor = nodeGraph.GetNodeAt(
                                        NodeHelper.GetNodeArrayElementFromFloat(nodePosX - 0.5f), 
                                        NodeHelper.GetNodeArrayElementFromFloat(nodePosY - 0.5f)
                                                    );
            neighborsNodes[6] = potentialNeighbor;               // Could be null, but that's okay.
            // Northwest.
            potentialNeighbor = nodeGraph.GetNodeAt(
                                        NodeHelper.GetNodeArrayElementFromFloat(nodePosX - 0.5f), 
                                        NodeHelper.GetNodeArrayElementFromFloat(nodePosY + 0.5f)
                                                    );
            neighborsNodes[7] = potentialNeighbor;               // Could be null, but that's okay.
        }

        return neighborsNodes;
    }

    public Node North()
    {
        return nodeGraph.GetNodeAt(
                                NodeHelper.GetNodeArrayElementFromFloat(nodePosX),
                                NodeHelper.GetNodeArrayElementFromFloat(nodePosY + 0.5f)
                                   );
    }

    public Node South()
    {
        return nodeGraph.GetNodeAt(
                                NodeHelper.GetNodeArrayElementFromFloat(nodePosX),
                                NodeHelper.GetNodeArrayElementFromFloat(nodePosY - 0.5f)
                                   );
    }

    public Node East()
    {
        return nodeGraph.GetNodeAt(
                                NodeHelper.GetNodeArrayElementFromFloat(nodePosX + 0.5f),
                                NodeHelper.GetNodeArrayElementFromFloat(nodePosY)
                                   );
    }

    public Node West()
    {
        return nodeGraph.GetNodeAt(
                                NodeHelper.GetNodeArrayElementFromFloat(nodePosX - 0.5f),
                                NodeHelper.GetNodeArrayElementFromFloat(nodePosY)
                                   );
    }

}
